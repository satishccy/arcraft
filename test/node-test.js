/**
 * Node.js test script for testing IPFS upload functionality
 * Usage: node test/node-test.js
 * 
 * Make sure to:
 * 1. Build the project first: npm run build
 * 2. Set PINATA_JWT environment variable
 * 3. Create a test image file at test/test-image.jpg
 */

const fs = require('fs');
const path = require('path');

// Import from the built package
const { IPFS, uploadToPinata, uploadJsonToPinata } = require('../dist/cjs/index.js');

async function testNodeJS() {
  console.log('üöÄ Starting Node.js IPFS Upload Tests\n');

  // Check if environment variable is set
  const pinataJWT = process.env.PINATA_JWT;
  if (!pinataJWT) {
    console.error('‚ùå Error: PINATA_JWT environment variable is not set');
    console.log('üí° Set it with: export PINATA_JWT="your_jwt_token_here"');
    process.exit(1);
  }

  // Create a test file if it doesn't exist
  const testImagePath = path.join(__dirname, 'test-image.txt');
  if (!fs.existsSync(testImagePath)) {
    console.log('üìù Creating test file...');
    fs.writeFileSync(testImagePath, 'This is a test file for IPFS upload testing.\nGenerated by arcraft Node.js test.');
  }

  try {
    console.log('üìÅ Test 1: Direct file upload using uploadToPinata');
    const directResult = await uploadToPinata({
      file: testImagePath,
      name: 'node-test-file.txt',
      token: pinataJWT,
    });
    console.log('‚úÖ Direct upload successful!');
    console.log(`   IPFS Hash: ${directResult.IpfsHash}`);
    console.log(`   IPFS URL: https://gateway.pinata.cloud/ipfs/${directResult.IpfsHash}`);
    console.log(`   Size: ${directResult.PinSize} bytes\n`);

    console.log('üèóÔ∏è  Test 2: Upload using IPFS class');
    const ipfs = new IPFS('pinata', {
      provider: 'pinata',
      jwt: pinataJWT,
    });

    const classResult = await ipfs.upload(testImagePath, 'node-test-class.txt');
    console.log('‚úÖ IPFS class upload successful!');
    console.log(`   IPFS Hash: ${classResult}`);
    console.log(`   IPFS URL: https://gateway.pinata.cloud/ipfs/${classResult}\n`);

    console.log('üìÑ Test 3: JSON upload');
    const testMetadata = {
      name: 'Test NFT',
      description: 'This is a test NFT created by arcraft Node.js test',
      image: `ipfs://${directResult.IpfsHash}`,
      attributes: [
        {
          trait_type: 'Environment',
          value: 'Node.js'
        },
        {
          trait_type: 'Test Type',
          value: 'Automated'
        }
      ],
      timestamp: new Date().toISOString()
    };

    const jsonResult = await uploadJsonToPinata({
      json: testMetadata,
      name: 'node-test-metadata.json',
      token: pinataJWT,
    });
    console.log('‚úÖ JSON upload successful!');
    console.log(`   IPFS Hash: ${jsonResult.IpfsHash}`);
    console.log(`   IPFS URL: https://gateway.pinata.cloud/ipfs/${jsonResult.IpfsHash}`);
    console.log(`   Metadata Preview:`);
    console.log(`   ${JSON.stringify(testMetadata, null, 2)}\n`);

    console.log('üéâ All Node.js tests completed successfully!');
    console.log('\nüìã Summary:');
    console.log(`   ‚Ä¢ Direct file upload: ${directResult.IpfsHash}`);
    console.log(`   ‚Ä¢ IPFS class upload: ${classResult}`);
    console.log(`   ‚Ä¢ JSON metadata upload: ${jsonResult.IpfsHash}`);

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    if (error.response) {
      console.error('   HTTP Status:', error.response.status);
      console.error('   Response:', error.response.data);
    }
    process.exit(1);
  }
}

// Run the test
testNodeJS().catch(console.error); 