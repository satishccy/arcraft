{"version":3,"file":"827.index.js","mappings":"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","sources":["webpack://arcraft/./node_modules/.pnpm/@aws-sdk+token-providers@3.826.0/node_modules/@aws-sdk/token-providers/dist-es/constants.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+token-providers@3.826.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+token-providers@3.826.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+token-providers@3.826.0/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+token-providers@3.826.0/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+token-providers@3.826.0/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+token-providers@3.826.0/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.826.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.826.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.826.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.826.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js"],"sourcesContent":["export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { getSSOTokenFilepath } from \"@smithy/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@smithy/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (_init = {}) => async ({ callerClientConfig } = {}) => {\n    const init = {\n        ..._init,\n        parentClientConfig: {\n            ...callerClientConfig,\n            ..._init.parentClientConfig,\n        },\n    };\n    init.logger?.debug(\"@aws-sdk/token-providers - fromSso\");\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    });\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n","import { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = async (ssoToken, ssoRegion, init = {}) => {\n    const { CreateTokenCommand } = await import(\"@aws-sdk/nested-clients/sso-oidc\");\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n","export const getSsoOidcClient = async (ssoRegion, init = {}) => {\n    const { SSOOIDCClient } = await import(\"@aws-sdk/nested-clients/sso-oidc\");\n    const ssoOidcClient = new SSOOIDCClient(Object.assign({}, init.clientConfig ?? {}, {\n        region: ssoRegion ?? init.clientConfig?.region,\n        logger: init.clientConfig?.logger ?? init.parentClientConfig?.logger,\n    }));\n    return ssoOidcClient;\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getSSOTokenFromFile } from \"@smithy/shared-ini-file-loader\";\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, parentClientConfig, profile, logger, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await import(\"./loadSso\");\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            logger: clientConfig?.logger ?? parentClientConfig?.logger,\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}, } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const credentials = {\n        accessKeyId,\n        secretAccessKey,\n        sessionToken,\n        expiration: new Date(expiration),\n        ...(credentialScope && { credentialScope }),\n        ...(accountId && { accountId }),\n    };\n    if (ssoSession) {\n        setCredentialFeature(credentials, \"CREDENTIALS_SSO\", \"s\");\n    }\n    else {\n        setCredentialFeature(credentials, \"CREDENTIALS_SSO_LEGACY\", \"u\");\n    }\n    return credentials;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async ({ callerClientConfig } = {}) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-sso - fromSSO\");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    });\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {\n                logger: init.logger,\n            });\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile, init.logger);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            parentClientConfig: init.parentClientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"', { tryNextLink: false, logger: init.logger });\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            parentClientConfig: init.parentClientConfig,\n            profile: profileName,\n        });\n    }\n};\n","export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const validateSsoProfile = (profile, logger) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, { tryNextLink: false, logger });\n    }\n    return profile;\n};\n"],"names":["REFRESH_MESSAGE","validateTokenExpiry","token","expiration","getTime","Date","now","validateTokenKey","key","value","forRefresh","writeFile","lastRefreshAttemptTime","fromSso","_init","async","callerClientConfig","init","parentClientConfig","logger","debug","profiles","profileName","profile","ssoSessionName","ssoSession","ssoSessionRequiredKey","ssoRegion","ssoToken","e","accessToken","expiresAt","existingToken","clientId","clientSecret","refreshToken","setTime","newSsoOidcToken","CreateTokenCommand","ssoOidcClient","SSOOIDCClient","Object","assign","clientConfig","region","getSsoOidcClient","send","grantType","getNewSsoOidcToken","expiresIn","newTokenExpiration","id","tokenFilepath","tokenString","JSON","stringify","writeSSOTokenToFile","toISOString","error","SHOULD_FAIL_CREDENTIAL_CHAIN","resolveSSOCredentials","ssoStartUrl","ssoAccountId","ssoRoleName","ssoClient","refreshMessage","_token","message","tryNextLink","SSOClient","GetRoleCredentialsCommand","sso","ssoResp","accountId","roleName","roleCredentials","accessKeyId","secretAccessKey","sessionToken","credentialScope","credentials","setCredentialFeature","fromSSO","arg","sso_start_url","sso_account_id","sso_session","sso_region","sso_role_name","session","conflictMsg","keys","join","validateSsoProfile"],"sourceRoot":""}