{"version":3,"file":"177.index.js","mappings":"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","sources":["webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.826.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.826.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.826.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.826.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.826.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.826.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.826.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.826.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { chain, CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName, logger) => {\n    const sourceProvidersMap = {\n        EcsContainer: async (options) => {\n            const { fromHttp } = await import(\"@aws-sdk/credential-provider-http\");\n            const { fromContainerMetadata } = await import(\"@smithy/credential-provider-imds\");\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is EcsContainer\");\n            return async () => chain(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);\n        },\n        Ec2InstanceMetadata: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata\");\n            const { fromInstanceMetadata } = await import(\"@smithy/credential-provider-imds\");\n            return async () => fromInstanceMetadata(options)().then(setNamedProvider);\n        },\n        Environment: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Environment\");\n            const { fromEnv } = await import(\"@aws-sdk/credential-provider-env\");\n            return async () => fromEnv(options)().then(setNamedProvider);\n        },\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });\n    }\n};\nconst setNamedProvider = (creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_NAMED_PROVIDER\", \"p\");\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg, { profile = \"default\", logger } = {}) => {\n    return (Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.role_arn === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n        (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger })));\n};\nconst isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {\n    const withSourceProfile = typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\n    if (withSourceProfile) {\n        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);\n    }\n    return withSourceProfile;\n};\nconst isCredentialSourceProfile = (arg, { profile, logger }) => {\n    const withProviderProfile = typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\n    if (withProviderProfile) {\n        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);\n    }\n    return withProviderProfile;\n};\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)\");\n    const profileData = profiles[profileName];\n    const { source_profile, region } = profileData;\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"@aws-sdk/nested-clients/sts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: {\n                ...options?.parentClientConfig,\n                region: region ?? options?.parentClientConfig?.region,\n            },\n        }, options.clientPlugins);\n    }\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), { logger: options.logger });\n    }\n    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        }, isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {}))\n        : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();\n    if (isCredentialSourceWithoutRoleArn(profileData)) {\n        return sourceCredsProvider.then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n    else {\n        const params = {\n            RoleArn: profileData.role_arn,\n            RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,\n            ExternalId: profileData.external_id,\n            DurationSeconds: parseInt(profileData.duration_seconds || \"3600\", 10),\n        };\n        const { mfa_serial } = profileData;\n        if (mfa_serial) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });\n            }\n            params.SerialNumber = mfa_serial;\n            params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n        }\n        const sourceCreds = await sourceCredsProvider;\n        return options.roleAssumer(sourceCreds, params).then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n};\nconst isCredentialSourceWithoutRoleArn = (section) => {\n    return !section.role_arn && !!section.credential_source;\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_account_id) > -1;\nexport const resolveStaticCredentials = async (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveStaticCredentials\");\n    const credentials = {\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        ...(profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope }),\n        ...(profile.aws_account_id && { accountId: profile.aws_account_id }),\n    };\n    return setCredentialFeature(credentials, \"CREDENTIALS_PROFILE\", \"n\");\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, data, options);\n    }\n    throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN\", \"q\")));\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_PROCESS\", \"v\")));\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const resolveSsoCredentials = async (profile, profileData, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n        parentClientConfig: options.parentClientConfig,\n        clientConfig: options.clientConfig,\n    })().then((creds) => {\n        if (profileData.sso_session) {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO\", \"r\");\n        }\n        else {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO_LEGACY\", \"t\");\n        }\n    });\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (_init = {}) => async ({ callerClientConfig } = {}) => {\n    const init = {\n        ..._init,\n        parentClientConfig: {\n            ...callerClientConfig,\n            ..._init.parentClientConfig,\n        },\n    };\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini - fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName({\n        profile: _init.profile ?? callerClientConfig?.profile,\n    }), profiles, init);\n};\n"],"names":["setNamedProvider","creds","setCredentialFeature","isCredentialSourceWithoutRoleArn","section","role_arn","credential_source","isStaticCredsProfile","arg","Boolean","aws_access_key_id","aws_secret_access_key","indexOf","aws_session_token","aws_account_id","resolveStaticCredentials","async","profile","options","logger","debug","credentials","accessKeyId","secretAccessKey","sessionToken","aws_credential_scope","credentialScope","accountId","resolveProfileData","profileName","profiles","visitedProfiles","isAssumeRoleRecursiveCall","data","Object","keys","length","role_session_name","external_id","mfa_serial","withSourceProfile","source_profile","isAssumeRoleWithSourceProfile","withProviderProfile","isCredentialSourceProfile","isAssumeRoleProfile","profileData","region","roleAssumer","getDefaultRoleAssumer","clientConfig","credentialProviderLogger","parentClientConfig","clientPlugins","join","sourceCredsProvider","credentialSource","sourceProvidersMap","EcsContainer","fromHttp","fromContainerMetadata","then","Ec2InstanceMetadata","fromInstanceMetadata","Environment","fromEnv","resolveCredentialSource","params","RoleArn","RoleSessionName","Date","now","ExternalId","DurationSeconds","parseInt","duration_seconds","mfaCodeProvider","tryNextLink","SerialNumber","TokenCode","sourceCreds","resolveAssumeRoleCredentials","web_identity_token_file","fromTokenFile","webIdentityTokenFile","roleArn","roleSessionName","roleAssumerWithWebIdentity","resolveWebIdentityCredentials","credential_process","isProcessProfile","fromProcess","resolveProcessCredentials","sso_start_url","sso_account_id","sso_session","sso_region","sso_role_name","isSsoProfile","fromSSO","resolveSsoCredentials","fromIni","_init","callerClientConfig","init"],"sourceRoot":""}