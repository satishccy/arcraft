{"version":3,"file":"627.index.js","mappings":"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","sources":["webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js","webpack://arcraft/./node_modules/.pnpm/@smithy+credential-provider-imds@4.0.6/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js"],"sourcesContent":["import { ProviderError } from \"@smithy/property-provider\";\nimport { Buffer } from \"buffer\";\nimport { request } from \"http\";\nexport function httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = request({\n            method: \"GET\",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n            reject(Object.assign(new ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", () => {\n            reject(new ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on(\"end\", () => {\n                resolve(Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n","export const isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.AccessKeyId === \"string\" &&\n    typeof arg.SecretAccessKey === \"string\" &&\n    typeof arg.Token === \"string\" &&\n    typeof arg.Expiration === \"string\";\nexport const fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n    ...(creds.AccountId && { accountId: creds.AccountId }),\n});\n","export const DEFAULT_TIMEOUT = 1000;\nexport const DEFAULT_MAX_RETRIES = 0;\nexport const providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n","export const retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri({ logger: init.logger });\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n                logger: init.logger,\n            });\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async ({ logger }) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", {\n        tryNextLink: false,\n        logger,\n    });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport class InstanceMetadataV1FallbackError extends CredentialsProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"InstanceMetadataV1FallbackError\";\n        Object.setPrototypeOf(this, InstanceMetadataV1FallbackError.prototype);\n    }\n}\n","export var Endpoint;\n(function (Endpoint) {\n    Endpoint[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n})(Endpoint || (Endpoint = {}));\n","export const ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nexport const CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nexport const ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n","export var EndpointMode;\n(function (EndpointMode) {\n    EndpointMode[\"IPv4\"] = \"IPv4\";\n    EndpointMode[\"IPv6\"] = \"IPv6\";\n})(EndpointMode || (EndpointMode = {}));\n","import { EndpointMode } from \"./EndpointMode\";\nexport const ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nexport const CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nexport const ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\nimport { EndpointMode } from \"../config/EndpointMode\";\nimport { ENDPOINT_MODE_CONFIG_OPTIONS, } from \"../config/EndpointModeConfigOptions\";\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return InstanceMetadataEndpoint.IPv4;\n        case EndpointMode.IPv6:\n            return InstanceMetadataEndpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n","const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\nexport const getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn(\"Attempting credential expiration extension due to a credential service availability issue. A refresh of these \" +\n        `credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: ` +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { InstanceMetadataV1FallbackError } from \"./error/InstanceMetadataV1FallbackError\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nconst AWS_EC2_METADATA_V1_DISABLED = \"AWS_EC2_METADATA_V1_DISABLED\";\nconst PROFILE_AWS_EC2_METADATA_V1_DISABLED = \"ec2_metadata_v1_disabled\";\nconst X_AWS_EC2_METADATA_TOKEN = \"x-aws-ec2-metadata-token\";\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });\nconst getInstanceMetadataProvider = (init = {}) => {\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await loadConfig({\n                environmentVariableSelector: (env) => {\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== \"false\";\n                    if (envValue === undefined) {\n                        throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile) => {\n                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== \"false\";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false,\n            }, {\n                profile,\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled)\n                    causes.push(\"credential provider initialization (runtime option ec2MetadataV1Disabled)\");\n                if (fallbackBlockedFromProfile)\n                    causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv)\n                    causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(\", \")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (no token fetch)\");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (initial)\");\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options, init) => {\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n            logger: init.logger,\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n};\n","import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\nexport const staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn(\"Credential renew failed: \", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n"],"names":["httpRequest","options","Promise","resolve","reject","req","request","method","hostname","replace","on","err","Object","assign","destroy","res","statusCode","chunks","chunk","push","Buffer","concat","end","isImdsCredentials","arg","Boolean","AccessKeyId","SecretAccessKey","Token","Expiration","fromImdsCredentials","creds","accessKeyId","secretAccessKey","sessionToken","expiration","Date","AccountId","accountId","providerConfigFromInit","maxRetries","timeout","retry","toRetry","promise","i","catch","ENV_CMDS_FULL_URI","ENV_CMDS_RELATIVE_URI","ENV_CMDS_AUTH_TOKEN","fromContainerMetadata","init","async","requestOptions","getCmdsUri","logger","credsResponse","JSON","parse","requestFromEcsImds","process","env","headers","Authorization","toString","GREENGRASS_HOSTS","localhost","GREENGRASS_PROTOCOLS","path","parsed","tryNextLink","protocol","port","parseInt","undefined","InstanceMetadataV1FallbackError","constructor","message","super","this","name","setPrototypeOf","prototype","Endpoint","ENDPOINT_CONFIG_OPTIONS","environmentVariableSelector","configFileSelector","profile","default","EndpointMode","ENDPOINT_MODE_CONFIG_OPTIONS","IPv4","getInstanceMetadataEndpoint","getFromEndpointConfig","getFromEndpointModeConfig","endpointMode","IPv6","Error","values","getExtendedInstanceMetadataCredentials","credentials","refreshInterval","Math","floor","random","newExpiration","now","warn","originalExpiration","IMDS_PATH","AWS_EC2_METADATA_V1_DISABLED","PROFILE_AWS_EC2_METADATA_V1_DISABLED","X_AWS_EC2_METADATA_TOKEN","fromInstanceMetadata","provider","console","pastCredentials","getTime","e","staticStabilityProvider","getInstanceMetadataProvider","disableFetchToken","getCredentials","fallbackBlockedFromProfile","fallbackBlockedFromProcessEnv","configValue","envValue","profileValue","ec2MetadataV1Disabled","causes","join","imdsProfile","getProfile","trim","getCredentialsFromProfile","endpoint","debug","token","getMetadataToken","error","includes","credentialsResponse"],"sourceRoot":""}