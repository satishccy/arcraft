{"version":3,"file":"296.index.js","mappings":"sKACO,MCCMA,EAAc,CAACC,EAAO,CAAC,IAAMC,OAASC,sBAAuB,CAAC,KACvEF,EAAKG,QAAQC,MAAM,sDACnB,MAAMC,QAAiB,QAAgBL,GACvC,MCDqCC,OAAOK,EAAaD,EAAUF,KACnE,MAAMI,EAAUF,EAASC,GACzB,IAAID,EAASC,GAwBT,MAAM,IAAI,KAAyB,WAAWA,mDAA8D,CACxGH,WAzBmB,CACvB,MAAMK,EAAoBD,EAA4B,mBACtD,QAA0BE,IAAtBD,EAkBA,MAAM,IAAI,KAAyB,WAAWF,wCAAmD,CAAEH,WAlBlE,CACjC,MAAMO,GAAc,IAAAC,WAAU,EAAAC,MAC9B,IACI,MAAM,OAAEC,SAAiBH,EAAYF,GACrC,IAAIM,EACJ,IACIA,EAAOC,KAAKC,MAAMH,EAAOI,OAC7B,CACA,MACI,MAAMC,MAAM,WAAWZ,8CAC3B,CACA,MFlB8B,EAACA,EAAaQ,EAAMT,KAC9D,GAAqB,IAAjBS,EAAKK,QACL,MAAMD,MAAM,WAAWZ,kDAE3B,QAAyBG,IAArBK,EAAKM,kBAAsDX,IAAzBK,EAAKO,gBACvC,MAAMH,MAAM,WAAWZ,sDAE3B,GAAIQ,EAAKQ,WAAY,CACjB,MAAMC,EAAc,IAAIC,KAExB,GADmB,IAAIA,KAAKV,EAAKQ,YAChBC,EACb,MAAML,MAAM,WAAWZ,qDAE/B,CACA,IAAImB,EAAYX,EAAKY,WAChBD,GAAapB,IAAWC,IAAcqB,iBACvCF,EAAYpB,EAASC,GAAaqB,gBAEtC,MAAMC,EAAc,CAChBC,YAAaf,EAAKM,YAClBU,gBAAiBhB,EAAKO,mBAClBP,EAAKiB,cAAgB,CAAEC,aAAclB,EAAKiB,iBAC1CjB,EAAKQ,YAAc,CAAEW,WAAY,IAAIT,KAAKV,EAAKQ,gBAC/CR,EAAKoB,iBAAmB,CAAEC,gBAAiBrB,EAAKoB,oBAChDT,GAAa,CAAEA,cAGvB,OADA,EAAAW,EAAA,GAAqBR,EAAa,sBAAuB,KAClDA,GETYS,CAA+B/B,EAAaQ,EAAMT,EAC7D,CACA,MAAOiC,GACH,MAAM,IAAI,KAAyBA,EAAMC,QAAS,CAAEpC,UACxD,CACJ,CAIJ,GDvBOqC,EAA0B,QAAe,CAC5CjC,QAASP,EAAKO,SAAWL,GAAoBK,UAC7CF,EAAUL,EAAKG,Q","sources":["webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.826.0/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.826.0/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js","webpack://arcraft/./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.826.0/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const getValidatedProcessCredentials = (profileName, data, profiles) => {\n    if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n    }\n    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n    }\n    if (data.Expiration) {\n        const currentTime = new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n    }\n    let accountId = data.AccountId;\n    if (!accountId && profiles?.[profileName]?.aws_account_id) {\n        accountId = profiles[profileName].aws_account_id;\n    }\n    const credentials = {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n        ...(data.CredentialScope && { credentialScope: data.CredentialScope }),\n        ...(accountId && { accountId }),\n    };\n    setCredentialFeature(credentials, \"CREDENTIALS_PROCESS\", \"w\");\n    return credentials;\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProcessCredentials } from \"./resolveProcessCredentials\";\nexport const fromProcess = (init = {}) => async ({ callerClientConfig } = {}) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-process - fromProcess\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProcessCredentials(getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    }), profiles, init.logger);\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles, logger) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            const execPromise = promisify(exec);\n            try {\n                const { stdout } = await execPromise(credentialProcess);\n                let data;\n                try {\n                    data = JSON.parse(stdout.trim());\n                }\n                catch {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                return getValidatedProcessCredentials(profileName, data, profiles);\n            }\n            catch (error) {\n                throw new CredentialsProviderError(error.message, { logger });\n            }\n        }\n        else {\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger });\n        }\n    }\n    else {\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {\n            logger,\n        });\n    }\n};\n"],"names":["fromProcess","init","async","callerClientConfig","logger","debug","profiles","profileName","profile","credentialProcess","undefined","execPromise","promisify","exec","stdout","data","JSON","parse","trim","Error","Version","AccessKeyId","SecretAccessKey","Expiration","currentTime","Date","accountId","AccountId","aws_account_id","credentials","accessKeyId","secretAccessKey","SessionToken","sessionToken","expiration","CredentialScope","credentialScope","setCredentialFeature","getValidatedProcessCredentials","error","message","resolveProcessCredentials"],"sourceRoot":""}